package main

import (
	"html/template"
	"log"
	"net/http"
)

// Define a template set for our pages
var templates *template.Template

// Data to pass to templates
type PageData struct {
	Title string
}

func init() {
	// Parse all templates at once (including header and footer)
	templates = template.Must(template.ParseGlob("templates/*.html"))
}

// Handler functions for different routes
func home(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	renderTemplate(w, "home.html", "Home")
}

func about(w http.ResponseWriter, r *http.Request) {
	renderTemplate(w, "about.html", "About Me")
}

func contact(w http.ResponseWriter, r *http.Request) {
	renderTemplate(w, "contact.html", "Contact Me")
}

func skills(w http.ResponseWriter, r *http.Request) {
	renderTemplate(w, "skills.html", "My Skills")
}

// Render a template with header and footer
func renderTemplate(w http.ResponseWriter, tmpl string, title string) {
	err := templates.ExecuteTemplate(w, tmpl, PageData{Title: title})
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func main() {
	// Serve static files from directory with proper path stripping
	http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("static"))))
	
	// Route handlers for all pages
	http.HandleFunc("/", home)
	http.HandleFunc("/about.html", about)
	http.HandleFunc("/contact.html", contact)
	http.HandleFunc("/skills.html", skills)

	// Start server and listen
	log.Println("Server starting on http://localhost:8080")
	err := http.ListenAndServe(":8080", nil)
	if err != nil {
		log.Fatal(err)
	}
}
